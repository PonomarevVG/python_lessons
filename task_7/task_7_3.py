# Задание 7.3
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.

class Cell:
    def __init__(self, n_count):
        self.count = n_count

    def __add__(self, other):
        return Cell(self.count + other.count)

    def __sub__(self, other):
        if self.count > other.count:
            return Cell(self.count - other.count)
        else:
            print(f'Число ячеек в разности клеток должно быть > 0 !')
            return None

    def __mul__(self, other):
        return Cell(self.count * other.count)

    def __truediv__(self, other):
        return Cell(self.count // other.count)

    def make_order(self, count_in_row):
        s = ''
        for i in range(self.count // count_in_row):
            s += '*'*count_in_row + '\n'
        s += '*'*(self.count % count_in_row)
        return s


cell1 = Cell(1)
cell2 = Cell(2)
print(f'Число ячеек в клетке, полученной в результате суммы = {(cell1 + cell2).count} \n')

print('Вычитание из клетки1 клетки2:')
sub_result = cell1 - cell2
if sub_result != None:
    print(sub_result.count)

print('\nВычитание из клетки2 клетки1. В результате число ячеек:')
sub_result = cell2 - cell1
if sub_result != None:
    print(sub_result.count)

print(f'\nЧисло ячеек в клетке, полученной в результате перемножения = {(cell1 * cell2).count} \n')

print(f'Число ячеек в клетке, полученной в результате деления клетки2 на клетку 1 = {(cell2 / cell1).count} \n')

print('Так выглядит применение make_order к клетке, содержащей 12 ячеек по 5 в ряд:')
print(Cell(12).make_order(5))
